package com.example.demo.entities;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import java.util.HashSet;
import java.util.Set;
import java.time.LocalDateTime;

@Getter
@Setter
@Entity
@Table(name = "users", uniqueConstraints = {
        @UniqueConstraint(columnNames = "email"),
        @UniqueConstraint(columnNames = "username")  // Ensure username is unique
})
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank
    @NonNull
    @Size(min = 3, max = 20)
    private String username;  // Username with validation

    @Column(nullable = false, unique = true)
    @NotBlank
    @Email
    private String email;  // Email with validation

    @Column(nullable = false)
    @NotBlank
    private String passwordHash;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "is_vendor")
    private boolean isVendor;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)  // One user can have multiple orders
    private Set<Order> orders;

    // Role-based access mapping
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    // No-argument constructor required by JPA
    public User() {
        // Empty constructor
    }

    // Constructor to initialize User with username, email, and password
    public User(@NotBlank @Size(min = 3, max = 20) String username,
                @NotBlank @Email String email,
                @NotBlank String passwordHash) {
        this.username = username;
        this.email = email;
        this.passwordHash = passwordHash;
        this.createdAt = LocalDateTime.now(); // Set createdAt when a new user is created
    }

    // The getPassword method will be automatically generated by Lombok's @Getter annotation
}
